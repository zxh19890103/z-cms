using Nt.DAL;
using Nt.DAL.Helper;
using Nt.Model;
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Common;
using System.Data.SqlClient;
using System.IO;
using System.Linq;
using System.Text;
using System.Xml;

namespace Nt.BLL.Helper
{
    public class SitemapHelper
    {
        #region const
        const string XMLNS = "http://www.sitemaps.org/schemas/sitemap/0.9";
        #endregion

        #region Props

        /// <summary>
        /// 是否是静态生成
        /// </summary>
        public bool IsHtml { get; set; }

        public int NewsPageSize
        {
            get
            {
                string v = System.Configuration.ConfigurationManager.AppSettings["news.list.pageSize"];
                if (v != null)
                    return Convert.ToInt32(v);
                return 12;
            }
        }

        public int ProductPageSize
        {
            get
            {
                string v = System.Configuration.ConfigurationManager.AppSettings["product.list.pageSize"];
                if (v != null)
                    return Convert.ToInt32(v);
                return 12;
            }
        }

        string _virtualDir2SaveXml = "/";
        public string VirtualDir2SaveXml
        {
            get { return _virtualDir2SaveXml; }
            set { _virtualDir2SaveXml = value; }
        }

        string _sitemapName = "sitemap.xml";
        /// <summary>
        /// the name of sitemap file,default:sitemap.xml
        /// </summary>
        public string SiteMapName
        {
            get { return _sitemapName; }
            set { _sitemapName = value; }
        }

        ChangeFrequency _changeFreq = ChangeFrequency.weekly;
        /// <summary>
        /// a value indicating the frequency this sitemap.xml being grabbed by search engine
        /// </summary>
        public ChangeFrequency ChangeFrequency
        {
            get { return _changeFreq; }
            set { _changeFreq = value; }
        }

        private bool _writeSitemapByNavigation = false;
        /// <summary>
        /// a boolean value indicating whether the sitemap.xml is generated by db or by hand.
        /// default:true(from db)
        /// </summary>
        public bool GenerateByDB
        {
            get { return _writeSitemapByNavigation; }
            set { _writeSitemapByNavigation = value; }
        }

        private SitemapType _sitemapType = SitemapType.Baidu;
        /// <summary>
        /// Baidu,Google,Sougou,Sousou,default:Baidu
        /// </summary>
        public SitemapType SitemapType
        {
            get { return _sitemapType; }
            set { _sitemapType = value; }
        }

        int _countOfFound = 0;
        public int CountOfFound
        {
            get { return _countOfFound; }
        }

        #endregion
        /// <summary>
        ///begin generating sitemap.xml
        /// </summary>
        public void GenerateSitemap()
        {
            if (_writeSitemapByNavigation)
                GenerateSitemapByNavigation();
            else
                GenerateSitemapByHtmlConfig();
        }

        /// <summary>
        /// generate a sitemap.xml file according to the data in Nt_Navigation
        /// </summary>
        void GenerateSitemapByNavigation()
        {
            DataTable data = CommonFactory.GetList("Nt_Navigation", "Display=1", "Depth");
            if (data.Rows.Count < 1)
                throw new Exception("导航数据库中暂无数据!");
            string dir = WebHelper.MapPath(VirtualDir2SaveXml);
            if (!Directory.Exists(dir))
                Directory.CreateDirectory(dir);
            string phy_xmlfile_path = dir + _sitemapName;
            FileStream stream = null;
            if (File.Exists(phy_xmlfile_path))
                File.Delete(phy_xmlfile_path);
            stream = File.Create(phy_xmlfile_path);
            XmlWriterSettings settings = new XmlWriterSettings();
            settings.Encoding = new UTF8Encoding(false);
            settings.Indent = true;
            settings.IndentChars = "  ";
            using (XmlWriter xmlWriter = XmlWriter.Create(stream, settings))
            {
                xmlWriter.WriteStartDocument(false);
                if (_sitemapType == SitemapType.Google)
                    xmlWriter.WriteStartElement("urlset", XMLNS);
                else
                    xmlWriter.WriteStartElement("urlset");
                string url = "";
                decimal priority = 0.0M;
                foreach (DataRow item in data.Rows)
                {
                    url = item["path"].ToString();
                    if (!url.StartsWith("http://"))
                    {
                        if (url.StartsWith("/"))
                            url = WebHelper.CurrentRootUrl + url;
                        else
                            url = WebHelper.CurrentRootUrl + "/" + url;
                    }

                    int depth = Convert.ToInt32(item["Depth"]);
                    priority = GetPriorityByDepth(depth);
                    WriteOneElement(xmlWriter,
                        url,
                        DateTime.Now, _changeFreq, priority);
                    _countOfFound++;
                }
                xmlWriter.WriteEndElement();
                xmlWriter.WriteEndDocument();
                xmlWriter.Flush();
                xmlWriter.Close();
            }
            stream.Flush();
            stream.Close();
            stream.Dispose();
        }

        /// <summary>
        /// 通过静态化配置文件进行sitemap的生成
        /// </summary>
        void GenerateSitemapByHtmlConfig()
        {
            XmlDocument doc = new XmlDocument();
            doc.Load(WebHelper.MapPath("/app_data/html.config"));
            XmlNodeList nodes = doc.SelectNodes("/htmlConfig/add");

            string dir = WebHelper.MapPath(VirtualDir2SaveXml);
            if (!Directory.Exists(dir))
                Directory.CreateDirectory(dir);
            string phy_xmlfile_path = dir + _sitemapName;
            FileStream stream = null;
            if (File.Exists(phy_xmlfile_path))
                File.Delete(phy_xmlfile_path);
            stream = File.Create(phy_xmlfile_path);
            XmlWriterSettings settings = new XmlWriterSettings();
            settings.Encoding = new UTF8Encoding(false);
            settings.Indent = true;
            settings.IndentChars = "  ";
            using (XmlWriter xmlWriter = XmlWriter.Create(stream, settings))
            {
                xmlWriter.WriteStartDocument(false);
                if (_sitemapType == SitemapType.Google)
                    xmlWriter.WriteStartElement("urlset", XMLNS);
                else
                    xmlWriter.WriteStartElement("urlset");
                decimal priority = 0.8M;
                string urlbase = WebHelper.CurrentRootUrl;
                string url = string.Empty;
                string pagetype = string.Empty;
                string tUrl = string.Empty;
                ChangeFrequency changeFreq = ChangeFrequency.daily;

                foreach (XmlNode item in nodes)
                {
                    changeFreq = ChangeFrequency.daily;
                    priority = 0.8M;
                    url = item.Attributes["path"].Value;
                    pagetype = item.Attributes["type"].Value;
                    //首页
                    if (pagetype == "1")
                    {
                        changeFreq = ChangeFrequency.always;
                        priority = 1.0M;
                        if (url.LastIndexOf('/') > 0)//频道首页
                            priority = 0.6M;
                        if (IsHtml)
                            tUrl = urlbase + url.Substring(0, url.LastIndexOf('/') + 1) + "index.html";
                        else
                            tUrl = urlbase + url;
                        WriteOneElement(xmlWriter, tUrl, DateTime.Now, changeFreq, priority);
                    }
                    else if (pagetype == "2")//新闻详细
                    {
                        string rootsid = item.Attributes["rootSortId"].Value;
                        using (SqlDataReader rs = SqlHelper.ExecuteReader(
                            SqlHelper.GetConnection(), CommandType.Text,
                            "select id from view_news where categorycrumbs like '%," + rootsid + ",%' and display=1 order by settop desc,recommended desc,displayorder desc,adddate desc")
                            )
                        {
                            while (rs.Read())
                            {
                                if (IsHtml)
                                    tUrl = string.Format("{0}/html/2/{1}.html", urlbase, rs[0]);
                                else
                                    tUrl = urlbase + url + "?id=" + rs[0];
                                WriteOneElement(xmlWriter,
                                   tUrl,
                                    DateTime.Now, changeFreq, priority);
                            }
                        }
                    }
                    else if (pagetype == "3")//产品详细
                    {
                        string rootsid = item.Attributes["rootSortId"].Value;
                        using (SqlDataReader rs = SqlHelper.ExecuteReader(
                            SqlHelper.GetConnection(), CommandType.Text,
                            "select id from view_product where categorycrumbs like '%," + rootsid + ",%' and display=1 order by settop desc,recommended desc,displayorder desc,adddate desc")
                            )
                        {
                            while (rs.Read())
                            {
                                if (IsHtml)
                                    tUrl = string.Format("{0}/html/3/{1}.html", urlbase, rs[0]);
                                else
                                    tUrl = urlbase + url + "?id=" + rs[0];
                                WriteOneElement(xmlWriter, tUrl, DateTime.Now, changeFreq, priority);
                            }
                        }
                    }
                    else if (pagetype == "6")//二级页
                    {
                        string ids = item.Attributes["ids"].Value;
                        foreach (string id in ids.Split(','))
                        {
                            if (IsHtml)
                                tUrl = string.Format("{0}/html/6/{1}.html", urlbase, id);
                            else
                                tUrl = urlbase + url + "?id=" + id;
                            WriteOneElement(xmlWriter, tUrl, DateTime.Now, changeFreq, priority);
                        }
                    }
                    else if (pagetype == "8")//新闻列表
                    {
                        string rootsid = item.Attributes["rootSortId"].Value;
                        using (SqlDataReader rs = SqlHelper.ExecuteReader(
                            SqlHelper.GetConnection(), CommandType.Text,
                            "select id from nt_newscategory where crumbs like '%," + rootsid +
                            ",%' and display=1")
                            )
                        {
                            while (rs.Read())
                            {
                                int count = Nt.DAL.CommonFactory.GetRecordCount("view_news", "display=1 and categorycrumbs like '%," + rs[0] + ",%' ");
                                int pages = count % NewsPageSize == 0 ? count / NewsPageSize : count / NewsPageSize + 1;
                                for (int i = 1; i <= pages; i++)
                                {
                                    if (IsHtml)
                                        tUrl = string.Format("{0}/html/8/{1}_{2}.html", urlbase, rs[0], i);
                                    else
                                        tUrl = urlbase + url + "?sortid=" + rs[0] + "&page=" + i;
                                    WriteOneElement(xmlWriter,
                                        tUrl,
                                        DateTime.Now, changeFreq, priority);
                                }
                            }
                        }
                    }
                    else if (pagetype == "9")//产品列表
                    {
                        string rootsid = item.Attributes["rootSortId"].Value;
                        using (SqlDataReader rs = SqlHelper.ExecuteReader(
                            SqlHelper.GetConnection(), CommandType.Text,
                            "select id from nt_productcategory where crumbs like '%," + rootsid +
                            ",%' and display=1")
                            )
                        {
                            while (rs.Read())
                            {
                                int count = Nt.DAL.CommonFactory.GetRecordCount("view_product", "display=1 and categorycrumbs like '%," + rs[0] + ",%' ");
                                int pages = count % ProductPageSize == 0 ? count / ProductPageSize : count / ProductPageSize + 1;
                                for (int i = 1; i <= pages; i++)
                                {
                                    if (IsHtml)
                                        tUrl = string.Format("{0}/html/9/{1}_{2}.html", urlbase, rs[0], i);
                                    else
                                        tUrl = urlbase + url + "?sortid=" + rs[0] + "&page=" + i;
                                    WriteOneElement(xmlWriter,
                                        tUrl,
                                        DateTime.Now, changeFreq, priority);
                                }
                            }
                        }
                    }
                    else
                    {
                        continue;
                    }
                }
                xmlWriter.WriteEndElement();
                xmlWriter.WriteEndDocument();
                xmlWriter.Flush();
                xmlWriter.Close();
            }
            stream.Flush();
            stream.Close();
            stream.Dispose();
        }

        /// <summary>
        /// get priority by depth
        /// </summary>
        /// <param name="depth">navigation depth</param>
        /// <returns></returns>
        decimal GetPriorityByDepth(int depth)
        {
            decimal minP = 0.2M;
            decimal p = 1.0M - depth * (0.2M);
            if (p <= minP)
                return minP;
            return p;
        }

        void WriteOneElement(XmlWriter writer,
            string loc, DateTime lastmod,
            ChangeFrequency changefreq, decimal priority)
        {
            writer.WriteStartElement("url");
            writer.WriteStartElement("loc");
            writer.WriteString(loc);
            writer.WriteEndElement();
            writer.WriteStartElement("lastmod");
            writer.WriteString(lastmod.ToString("yyyy-MM-dd"));
            writer.WriteEndElement();
            writer.WriteStartElement("changefreq");
            writer.WriteString(changefreq.ToString());
            writer.WriteEndElement();
            writer.WriteStartElement("priority");
            writer.WriteString(priority.ToString());
            writer.WriteEndElement();
            writer.WriteEndElement();
            _countOfFound++;
        }

    }
}

public enum ChangeFrequency
{
    always = 1, hourly, daily, weekly, monthly, yearly, never
}

public enum SitemapType { Baidu = 1, Google, Sougou, Sousou }